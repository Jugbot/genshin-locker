import { execFileSync } from 'child_process'
import { app, BrowserWindow } from 'electron'
import { exit } from 'process'

import { mainApi } from './api'
import { Channel } from './apiTypes'
import { readArtifacts } from './automation/routines'
import { MENUBAR_BACKCOLOR, MENUBAR_COLOR } from './stitches/theme'

try {
  execFileSync('net', ['session'], { stdio: 'ignore' })
  console.log('Successfully gained priviledge')
} catch (e) {
  console.error('Requires elevated permssions')
  exit(1)
}

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit()
}

// TODO: proper global access
export let mainWindow: Electron.BrowserWindow
const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    titleBarStyle: 'hidden',
    titleBarOverlay: {
      color: MENUBAR_BACKCOLOR,
      symbolColor: MENUBAR_COLOR,
    },
    height: 600,
    width: 800,
    webPreferences: {
      // sandbox: false,
      // contextIsolation: false,
      // nodeIntegration: true,
      // nodeIntegrationInWorker: true,
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  })

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY)

  // Open the DevTools.
  mainWindow.webContents.openDevTools()

  mainApi.handle(Channel.START, (options) => {
    try {
      readArtifacts(options)
    } catch (e) {
      console.error(e)
    }
  })
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow)

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit()
  }
})

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow()
  }
})

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
